PR include "read.a68" PR

PROC traverse = (REF NUMBER num, PROC(INT,REF NUMBER)BOOL visit)VOID:
BEGIN
  PROC dive into = (INT depth, REF NUMBER num)VOID:
  BEGIN
    BOOL found = visit(depth, num);
    CASE num IN
      (REF PAIR sub): IF NOT found THEN
                        dive into(depth+1, left  OF sub);
			dive into(depth+1, right OF sub)
                      FI
    ESAC
  END;
  dive into(0,num)
END;

PROC is regular = (PAIR tuple)BOOL:
  (BOOL result := TRUE;
   []NUMBER pair = (left OF tuple, right OF tuple);
   FOR i TO UPB pair WHILE result DO
     (pair[i] | (INT n): ~ | result := FALSE)
   OD; result);

PROC snailfish reduce = (REF NUMBER data)VOID:
BEGIN
  REF NUMBER last regular;
  INT last regular value, add to next regular;
  BOOL exploded;

  PROC explode = (INT depth, REF NUMBER cell)BOOL:
    CASE cell IN (REF PAIR pair): 
                  IF depth >= 4 AND is regular(pair) AND NOT exploded THEN
                    IF REF NUMBER prev cell = last regular; prev cell ISNT NIL THEN
                      prev cell := last regular value + (left OF pair | (INT n): n)
                    FI;
                    add to next regular := (right OF pair | (INT n): n);
                    cell := 0;
                    exploded := TRUE
                  ELSE FALSE
                  FI,
                  (INT n): 
                    BEGIN
                      cell := n + add to next regular;
                      last regular := cell;
                      last regular value := n;
                      IF exploded THEN just start again FI
                    END
    ESAC;

  PROC split = (INT depth, REF NUMBER cell)BOOL:
    (cell | (INT n): IF n >= 10 THEN cell := make pair (n%2, (n+1)%2); just start again FI | FALSE);
   
just start again:
  CO dump(data); print(new line); CO
  exploded := FALSE;
  last regular := NIL;
  add to next regular := 0;
  traverse(data, explode);
  traverse(data, split)
END;

OP +:= = (REF NUMBER x, NUMBER y)VOID:
  snailfish reduce(x := make pair(x,y));

OP ABS = (NUMBER x)INT:
  CASE x IN
    (INT n): n,
    (REF PAIR pair): 3*ABS left OF pair + 2*ABS right OF pair
  ESAC;

NUMBER acc := homework[1];
FOR i FROM 2 TO UPB homework DO
  acc +:= homework[i]
OD;

dump(acc);
print((ABS acc, new line))
